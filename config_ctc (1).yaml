# It contains the default values for training a Conformer-CTC ASR model, large size (~120M) with CTC loss and char-based vocabulary.
# Char-based encoding may give lower accuracy than sub-word encoding (conformer_ctc_bpe.yaml).

# You may find more detail on Conformer-CTC at `examples/asr/conf/conformer/conformer_ctc_bpe.yaml`

name: "conformer_ctc_ipl"

model:
  sample_rate: 16000  
  compute_eval_loss: false
  log_prediction: true # enables logging sample predictions in the output during training
  ctc_reduction: 'mean_batch'
  lr: 0.01
  model_defaults:
    se: true
    se_context_size: -1
    enc_hidden: 256
    pred_hidden: 640
    joint_hidden: 640
    
  train_ds:
    manifest_filepath: /store1/vkreeger/IPL/labeled_manifest_part100h.json
#     manifest_filepath: /store1/vkreeger/manifests/libri/librispeech_original/libri_train100.json
#     manifest_filepath: /store1/vkreeger/IPL/labeled_manifest.json
    sample_rate: ${model.sample_rate}
    batch_size: 24 # you may increase batch_size if your memory allows
    shuffle: false
    #shuffle_n: 2048
    num_workers: 8 
    trim_silence: false
    use_start_end_token: false
    max_duration: 18.
    min_duration: 1.5

  validation_ds:
    manifest_filepath: 
        - /store1/vkreeger/IPL/labeled_validation.json
#         - /store1/vkreeger/manifests/libri/librispeech_original/libri_dev_clean.json
#         - /store1/vkreeger/manifests/libri/librispeech_original/libri_dev_other.json
#       - /store1/rvygon/ipl/val_golos_wav.json
#       - /store1/rvygon/ipl/val_cv_fix.json
#       - /store1/rvygon/ipl/val_openstt_wav_fix.json
    sample_rate: ${model.sample_rate}
    batch_size: 32 # you may increase batch_size if your memory allows
    shuffle: false
    num_workers: 16
    use_start_end_token: false

  test_ds:
    manifest_filepath: /store1/vkreeger/IPL/labeled_manifest_part_other_fix.json
#     manifest_filepath: /store1/vkreeger/manifests/libri/librispeech_original/libri860.json
#     manifest_filepath: /store1/vkreeger/IPL/unlabeled_manifest.json
    sample_rate: ${model.sample_rate}
    batch_size: 24 # you may increase batch_size if your memory allows
    shuffle: true    
    num_workers: 0
    max_duration: 18.
    min_duration: 1.5
    use_start_end_token: false

  tokenizer:
#     dir: '/store1/vkreeger/IPL/libri_tokenizer'
    dir: 'tokenizers/tokenizer_spe_unigram_v1024'  # path to directory which contains either tokenizer.model (bpe) or vocab.txt (wpe)
    type: bpe  # Can be either bpe (SentencePiece tokenizer) or wpe (WordPiece tokenizer)


  preprocessor:
    _target_: nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor
    sample_rate: ${model.sample_rate}
    normalize: "per_feature"
    window_size: 0.025
    window_stride: 0.01
    window: "hann"
    features: 80
    n_fft: 512
    log: true
    frame_splicing: 1
    dither: 0.00001
    pad_to: 0
    pad_value: 0.0

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 2 # set to zero to disable it
    # you may use lower time_masks for smaller models to have a faster convergence
    time_masks: 5 # set to zero to disable it
    freq_width: 27
    time_width: 0.05

  encoder:
    _target_: nemo.collections.asr.modules.ConformerEncoder
    feat_in: ${model.preprocessor.features}
    feat_out: -1 # you may set it if you need different output size other than the default d_model
    n_layers: 16
    d_model: 256

    # Sub-sampling params
    subsampling: striding # vggnet or striding, vggnet may give better results but needs more memory
    subsampling_factor: 4 # must be power of 2
    subsampling_conv_channels: -1 # set to -1 to make it equal to the d_model

    # Feed forward module's params
    ff_expansion_factor: 4

    # Multi-headed Attention Module's params
    self_attention_model: rel_pos # rel_pos or abs_pos
    n_heads: 4 # may need to be lower for smaller d_models
    # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
    att_context_size: [-1, -1] # -1 means unlimited context
    xscaling: true # scales up the input embeddings by sqrt(d_model)
    untie_biases: true # unties the biases of the TransformerXL layers
    pos_emb_max_len: 5000

    # Convolution module's params
    conv_kernel_size: 31

    ### regularization
    dropout: 0.1 # The dropout used in most of the Conformer Modules
    dropout_emb: 0.0 # The dropout used for embeddings
    dropout_att: 0.1 # The dropout for multi-headed attention modules

  decoder:
    _target_: nemo.collections.asr.modules.ConvASRDecoder
    feat_in: null
    num_classes: -1
    vocabulary: []

  # RNNT loss config

  optim:
    name: adamw
    lr: ${model.lr}
    # optimizer arguments
    betas: [0.9, 0.98]
    # less necessity for weight_decay as we already have large augmentations with SpecAug
    # you may need weight_decay for large models, stable AMP training, small datasets, or when lower augmentations are used
    # weight decay of 0.0 with lr of 2.0 also works fine
    weight_decay: 1e-3

    # scheduler setup
    sched:
      name: NoamAnnealing
      d_model: ${model.encoder.d_model}
      warmup_steps: 5000
      warmup_ratio: null
      min_lr: 1e-6

trainer:
  gpus: 1 # number of GPUs, -1 would use all available GPUs
  num_nodes: 1
  max_epochs: 100
  #max_steps: 500 # computed at runtime if not set
  val_check_interval: 0.25 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
#   limit_val_batches: 0.0
  accelerator: null
  auto_lr_find: false
  accumulate_grad_batches: 1
  gradient_clip_val: 0.0
  #amp_level: O1 # O1/O2 for mixed precision
  precision: 16 # Should be set to 16 for O1 and O2 to enable the AMP.
  log_every_n_steps: 100  # Interval of logging.
  progress_bar_refresh_rate: 100
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager


exp_manager:
  exp_dir: null
  name: ${name}
  create_tensorboard_logger: false
  create_checkpoint_callback: true
  checkpoint_callback_params:
    # in case of multiple validation sets, first one is used
    monitor: "val_wer"
    mode: "min"
    save_top_k: 3

  # you need to set these two to True to continue the training
  resume_if_exists: False
  resume_ignore_no_checkpoint: False

  # You may use this section to create a W&B logger
  create_wandb_logger: True
  wandb_logger_kwargs:
    entity: zomg
    name: conformer_ctc_ipl_labeled_train
    project: slimipl_fix

hydra:
  run:
    dir: .
  job_logging:
    root:
      handlers: null
